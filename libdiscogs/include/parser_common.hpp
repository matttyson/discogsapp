/* clang-format off */
/* Autogenerated.  Do not edit. */

#pragma once

#include <memory>
#include <string>
#include <cstring>
#include <vector>


namespace discogs {
namespace parser {

enum class DataType : unsigned short;
enum class StackKey : unsigned short;

class StackLocation
{
public:
	StackLocation(StackKey theKey, DataType theType)
		: m_key(theKey), m_type(theType) {}

	StackKey key() const { return m_key; }
	DataType type() const { return m_type; }

private:
	StackKey m_key;
	DataType m_type;
};

class StackList
{
public:
	void add(StackKey key, DataType type) {
		m_location.emplace_back(key,type);
	}

	const StackLocation peek() const { return m_location.back(); }
	void pop() { m_location.pop_back(); }

	StackKey parent();

private:
	std::vector<StackLocation> m_location;
};

/* extra headers begin */
/* parser_fragment.h */
#ifdef RJSP_WIDE_CHAR
typedef rapidjson::UTF16<> rjs_UTF_t;
#else
typedef rapidjson::UTF8<> rjs_UTF_t;
#endif

/* extra headers end */
} // namespace discogs
} // namespace parser
/* clang-format on */
