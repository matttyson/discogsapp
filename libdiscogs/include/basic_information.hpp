/* clang-format off */
/* Autogenerated.  Do not edit. */

#pragma once

#include "class_common.hpp"

namespace discogs {
namespace parser {
namespace basic_information {

class label {
public:
	label(): id(0) {}
	~label(){}
	label(const label &rhs) = default;
	label(label &&rhs) noexcept = default;
	label& operator=(const label &rhs) = default;
	label& operator=(label &&rhs) noexcept = default;

	int id;
	string_t name;
	string_t entity_type;
	string_t catno;
	string_t resource_url;
	string_t entity_type_name;
};

class format {
public:
	format(){}
	~format(){}
	format(const format &rhs) = default;
	format(format &&rhs) noexcept = default;
	format& operator=(const format &rhs) = default;
	format& operator=(format &&rhs) noexcept = default;

	string_t name;
	string_t qty;
	string_t text;
	std::vector<string_t> descriptions;
};

class artist {
public:
	artist(): id(0) {}
	~artist(){}
	artist(const artist &rhs) = default;
	artist(artist &&rhs) noexcept = default;
	artist& operator=(const artist &rhs) = default;
	artist& operator=(artist &&rhs) noexcept = default;

	int id;
	string_t join;
	string_t name;
	string_t anv;
	string_t tracks;
	string_t role;
	string_t resource_url;
};

class note {
public:
	note(): field_id(0) {}
	~note(){}
	note(const note &rhs) = default;
	note(note &&rhs) noexcept = default;
	note& operator=(const note &rhs) = default;
	note& operator=(note &&rhs) noexcept = default;

	int field_id;
	string_t value;
};

class basic_information {
public:
	basic_information(): year(0), id(0), folder_id(0) {}
	~basic_information(){}
	basic_information(const basic_information &rhs) = default;
	basic_information(basic_information &&rhs) noexcept = default;
	basic_information& operator=(const basic_information &rhs) = default;
	basic_information& operator=(basic_information &&rhs) noexcept = default;

	int year;
	int id;
	int folder_id;
	string_t thumb;
	string_t title;
	string_t cover_image;
	string_t resource_url;
	std::vector<label> label_;
	std::vector<format> format_;
	std::vector<artist> artist_;
	std::vector<note> notes_;
};


} // namespace discogs
} // namespace parser
} // namespace basic_information

/* clang-format on */
