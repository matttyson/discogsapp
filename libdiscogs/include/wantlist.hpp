/* clang-format off */
/* Autogenerated.  Do not edit. */

#pragma once

#include "class_common.hpp"
#include "paginate.hpp"
#include "basic_information.hpp"

namespace discogs {
namespace parser {
namespace wantlist {

class want {
public:
	want(): id(0), rating(0) {}
	~want(){}
	want(const want &rhs) = default;
	want(want &&rhs) noexcept = default;
	want& operator=(const want &rhs) = default;
	want& operator=(want &&rhs) noexcept = default;

	int id;
	int rating;
	string_t notes;
	string_t date_added;
	string_t resource_url;
	basic_information::basic_information basic_information_;
};

class container {
public:
	container(){}
	container(std::vector<want> &&want__, paginate::pagination &&pagination__) noexcept
		:wants_(std::move(want__)),
		pages(std::move(pagination__))  {}
	container(const container &rhs) = default;
	container(container &&rhs) noexcept = default;
	container& operator=(const container &rhs) = default;
	container& operator=(container &&rhs) noexcept = default;

	std::vector<want> wants_;
	paginate::pagination pages;

};

} // namespace discogs
} // namespace parser
} // namespace wantlist

/* clang-format on */
