/* clang-format off */
/* Autogenerated.  Do not edit. */

#pragma once

#include <rapidjson/reader.h>
#include "collection.hpp"
#include "parser_common.hpp"

namespace discogs {
namespace parser {
namespace collection {

class parser : public rapidjson::BaseReaderHandler<rjs_UTF_t, parser> {
public:
	parser();
	bool Null();
	bool Bool(bool b);
	bool Int(int i);
	bool Uint(unsigned i);
	bool Int64(int64_t i);
	bool Uint64(uint64_t i);
	bool Double(double d);
	bool String(const Ch* str, rapidjson::SizeType length, bool copy);
	bool Key(const Ch* str, rapidjson::SizeType length, bool copy);
	bool StartObject();
	bool EndObject(rapidjson::SizeType memberCount);
	bool StartArray();
	bool EndArray(rapidjson::SizeType elementCount);
	bool RawNumber(const Ch * str, rapidjson::SizeType length, bool copy);
public:
	bool Number(int i);
	StackKey m_currentKey;
	StackList m_list;
	std::vector<folder> folders_;
};

} // namespace discogs
} // namespace parser
} // namespace collection

/* clang-format on */
