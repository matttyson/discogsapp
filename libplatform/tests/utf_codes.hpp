#pragma once

// https://www.ltg.ed.ac.uk/~richard/unicode-sample.html
// https://r12a.github.io/app-conversion/

// ∀ ∁ ∂ ∃ ∄ ∅ ∆ ∇ ∈ ∉ ∊ ∋ ∌ ∍ ∎ ∏ ∐ ∑

const platform::string_t utf_code_string = STR("∀ ∁ ∂ ∃ ∄ ∅ ∆ ∇ ∈ ∉ ∊ ∋ ∌ ∍ ∎ ∏ ∐ ∑");

#ifdef PLATFORM_WCHAR

const wchar_t utf_codes[] = {
	0x2200, 0x0020, 0x2201, 0x0020, 0x2202, 0x0020, 0x2203, 0x0020, 0x2204, 0x0020, 0x2205,
	0x0020, 0x2206, 0x0020, 0x2207, 0x0020, 0x2208, 0x0020, 0x2209, 0x0020, 0x220A, 0x0020,
	0x220B, 0x0020, 0x220C, 0x0020, 0x220D, 0x0020, 0x220E, 0x0020, 0x220F, 0x0020, 0x2210,
	0x0020, 0x2211
};
const int utf_code_count = sizeof(utf_codes) / sizeof(wchar_t);

#else

const unsigned char utf_codes[] = {
	0xE2, 0x88, 0x80, 0x20, 0xE2, 0x88, 0x81, 0x20, 0xE2, 0x88, 0x82, 0x20, 0xE2, 0x88, 0x83, 0x20,
	0xE2, 0x88, 0x84, 0x20, 0xE2, 0x88, 0x85, 0x20, 0xE2, 0x88, 0x86, 0x20, 0xE2, 0x88, 0x87, 0x20,
	0xE2, 0x88, 0x88, 0x20, 0xE2, 0x88, 0x89, 0x20, 0xE2, 0x88, 0x8A, 0x20, 0xE2, 0x88, 0x8B, 0x20,
	0xE2, 0x88, 0x8C, 0x20, 0xE2, 0x88, 0x8D, 0x20, 0xE2, 0x88, 0x8E, 0x20, 0xE2, 0x88, 0x8F, 0x20,
	0xE2, 0x88, 0x90, 0x20, 0xE2, 0x88, 0x91,
}
const int utf_code_count = sizeof(utf_codes) / sizeof(unsigned char);

#endif
